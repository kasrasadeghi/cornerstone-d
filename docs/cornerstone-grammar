(Program (#name (* TopLevel)))
  (TopLevel (| StrTable Struct Def Decl))

(StrTable (str-table (* StrTableEntry)))
  (StrTableEntry (#int #string))

(Struct (struct #name (* Field)))
  (Field (#name #type))

(Decl (decl #name TypeList #type))
  (TypeList (types (* #type)))

(Def (def #name ParamList #type Do))
(ParamList (params (* Param)))
(Param (#name #type))

(Do (do (* Stmt)))
(Stmt (| Let Return If Store Auto Do CallLike))
  (Let (let #name Expr))
  (If (if Expr Do))
  (Return (| ReturnValue ReturnVoid))
    (ReturnValue (return Expr #type))
    (ReturnVoid (return))
  (Store (store Expr #type Expr))
  (Auto (auto #name #type))

(Expr (| CallLike MathBinop Icmp LoadIndex Cast Value))
  (Load (load #type Expr))
  (Index (index Expr #type Expr))
  (Cast (cast #type #type Expr))
  (Value (| Literal StrGet #name))
    (Literal (| #int #bool))
    (StrGet (str-get #int))
  (MathBinop (| Add))
    (Add (+ #type Expr Expr))
  (Icmp (| LT LE GT GE EQ NE))
    (LT (< #type Expr Expr))
    (LE (<= #type Expr Expr))
    (GT (> #type Expr Expr))
    (GE (>= #type Expr Expr))
    (EQ (== #type Expr Expr))
    (NE (!= #type Expr Expr))
  (ArgList (args (* Expr)))
  (CallLike (| Call CallVargs CallTail Become))
    (Call (call #name TypeList #type ArgList))
    (CallVargs (call-vargs #name TypeList #type ArgList))
    (CallTail (call-tail #name TypeList #type ArgList))
    (Become (become #name TypeList #type ArgList))

// Binop[x]  -> (x Type Expr Expr)
