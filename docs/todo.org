- [0.9] verifier
  - [x] generate verification traversal
    - [x] grammar verification (naively done)
    - [x] extract eval
      -> result
  - fixup some issues:
    - [.] value classes
    - [x] pretty up formatting
  - result
    - [ ] lazy imperative results
      - [x] naive choice
      - [x] naive many
      - [x] naive many and only
      - [ ] one-step lookahead choice
      - [ ] result contains necessary proof
      - pros and cons:
        + very simple
        + probably faster
        + no wrapper
        + already done
        + easy to understand constructs
        - no abstraction around conditions and computational sequencing
        - must be generated and compiled
        - very verbose
    - [x] eager style results
      - pros and cons:
        + very simple
        + wrapper around basic types
        + probably faster
        + already done
        - no abstraction around conditions and computational sequencing
        - must be generated and compiled
    - [ ] lazy style result
      - pros and cons:
        - complicated
        + a path towards interpretive verification
        + algebraic abstractions
      - [ ] choice
      - [ ] sequence
    - [ ] generic result that abstracts over a foldable type?
      - can take in a node, the sequencing operation, and the choice operation
- minimum grammar
  - [ ] compute minimum grammar
    - [ ] compute minimum subset of known grammar
    - [ ] generate grammar from program examples
  - [ ] extract minimum grammar
- [ ] test subtree modification
- [ ] grammar normalization
- [ ] invertible function between texp and json
  - may not be isomorphic, but should be invertible
- [ ] verification between passes
  - [ ] cached lookup in verification steps between passes
  - [ ] verification of elements of a grammar in a pass
    - accessors based on the name of that production
    - ex:
      - (Add (+ arg1:Expr arg2:Expr))
      - Add.arg1: texp -> texp
        - a texp accessor
        - makes sure that the input texp is an Add, that it follows the correct productions
          up to the root, and that its children are well formed
        - optionally can just check that its children are well-formed
          - enables grammar verification to be much more flexible
- [ ] generate identity traversal
  - [x] put grammar into dict
  - [x] extract collection/fold
    - foldTraversal
- [ ] manually verify the backbone grammar
- [ ] implement backbone in d
- [ ] explore multi-stage compilation
  - [ ] explore d mixins
  - [ ] explore julia macros