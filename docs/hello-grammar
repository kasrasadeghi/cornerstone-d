(Program (#name (* TopLevel)))
(TopLevel (| 
  StrTable 
  //Struct
  Def 
  Decl
  ))
(StrTable (str-table (* StrTableEntry)))
(StrTableEntry (#int #string))

//(Struct (struct #name (* Field)))
//(Field (#name #type))

(Decl (decl #name TypeList #type))
(TypeList (types (* #type)))

(Def (def #name ParamList #type Do))
(ParamList (params (* Param)))
(Param (#name #type))

(ArgList (args (* Expr)))
(CallLike (| 
  Call 
  //CallVargs 
  //CallTail 
  //Become
  ))
(Call (call #name TypeList #type ArgList))
//(CallVargs (call-vargs #name TypeList #type ArgList))
//(CallTail (call-tail #name TypeList #type ArgList))
//(Become (become #name TypeList #type ArgList))

(Stmt (| 
  //Let 
  Return 
  //If 
  //Store 
  //Auto 
  CallLike
  Do
  ))
// (Let (let #name Expr))
// (If (if Expr Do))
(Return (| 
  ReturnValue 
  //ReturnVoid
  ))
(ReturnValue (return-value Expr #type))
//(ReturnVoid (return-void))
//(Store (store Expr #type Expr))
//(Auto (auto #name #type))
(Do (do (* Stmt)))

(Expr (| 
  CallLike 
  //MathBinop 
  //Icmp 
  //Load
  //Index 
  //Cast 
  Value
  ))
//(Load (load #type Expr))
//(Index (index Expr #type Expr))
//(Cast (cast #type #type Expr))
(Value (| Literal StrGet #name))
(Literal (| #int #bool))
(StrGet (str-get #int))

//(MathBinop (| Add))
//(Icmp (| LT LE GT GE EQ NE))
//(Add (+ #type Expr Expr))
//(LT (< #type Expr Expr))
//(LE (<= #type Expr Expr))
//(GT (> #type Expr Expr))
//(GE (>= #type Expr Expr))
//(EQ (== #type Expr Expr))
//(NE (!= #type Expr Expr))


// Binop[x]  -> (x Type Expr Expr)
